#lang racket

(require (lib "Graphics.ss" "graphics"))
(open-graphics)
(define ventana (open-viewport "Me-Up" 500 500 ))
((draw-viewport ventana) "black")
(define posy- 250)
(define cuadrado-posn 500)
(define circle-posn-x 250)
(define circle-posn-y 250)
(define juego-activo #t)
(define hitbox-tolerance 100)
(define puntaje 0)
(define nave "C:/Users/Deadm/OneDrive/Documentos/Universidad/UTP/S2 UTP/Programación I/Juego-alone/nave.png")
(define alien "C:/Users/Deadm/OneDrive/Documentos/Universidad/UTP/S2 UTP/Programación I/Juego-alone/alien.png")

(define (elipse posx posy)
  ((draw-pixmap ventana) nave (make-posn posx posy)))

(define (borrar-elipse posx posy)
  ((draw-solid-rectangle ventana) (make-posn posx posy) 127 107 "black"))

(define (cambiar-posn posx posy)
  (cond
      [juego-activo
    (define key-pressed (get-key-press ventana))
    (define key-values (if key-pressed (key-value key-pressed) 'none))
    (cond
      [(equal? key-values 'up)
       (cond
         [(< posy 0)(borrar-elipse posx posy)
       (define new-posy (+ posy 10))
         (elipse posx new-posy)
         (set! circle-posn-y new-posy)
         (cambiar-posn posx new-posy)] 
         [else
       (borrar-elipse posx posy)
       (define new-posy (- posy 10))
         (elipse posx new-posy)
         (set! circle-posn-y new-posy)
         (cambiar-posn posx new-posy)])]
      
      [(equal? key-values 'down)

       (cond
         [(> posy 390)(borrar-elipse posx posy)
       (define new-posy (- posy 10))
         (elipse posx new-posy)
         (set! circle-posn-y new-posy)
         (cambiar-posn posx new-posy)] 
         [else
       (borrar-elipse posx posy)
       (define new-posy (+ posy 10))
         (elipse posx new-posy)
         (set! circle-posn-y new-posy)
         (cambiar-posn posx new-posy)])]
       
     
      
      [(equal? key-values 'left)

       (cond
         [(< posx 0)(borrar-elipse posx posy)
       (define new-posx (+ posx 10))
         (elipse new-posx posy)
         (set! circle-posn-x new-posx)
         (cambiar-posn new-posx posy)] 
         [else
       (borrar-elipse posx posy)
       (define new-posx (- posx 10))
         (elipse new-posx posy)
         (set! circle-posn-x new-posx)
         (cambiar-posn new-posx posy)])]
      
      [(equal? key-values 'right)
       (cond
         [(> posx 390)(borrar-elipse posx posy)
       (define new-posx (- posx 10))
         (elipse new-posx posy)
         (set! circle-posn-x new-posx)
         (cambiar-posn new-posx posy)] 
         [else
       (borrar-elipse posx posy)
       (define new-posx (+ posx 10))
         (elipse new-posx posy)
         (set! circle-posn-x new-posx)
         (cambiar-posn new-posx posy)])]
      [else
       (cambiar-posn posx posy)])]))

(define (colision? x1 y1 x2 y2 tolerance)
  (and (<= (abs (- x1 x2)) tolerance)
       (<= (abs (- y1 y2)) tolerance)))

(define (mover-cuadrado n)
  (cond
    [juego-activo
    (cond
      [(< n -110)
       (set! posy- (random 480))
       (mover-cuadrado 500)]
      [else
       (set! puntaje (+ puntaje 1))
       (display "Score: ")
       (displayln puntaje)
       ((draw-solid-rectangle ventana) (make-posn (+ 10 n) posy-) 104 104 "black")
       ((draw-pixmap ventana) alien (make-posn n posy-))
       (cond
         [(colision? n posy- circle-posn-x circle-posn-y hitbox-tolerance)
         (set! juego-activo #f)
         (displayln "Juego terminado")])
       (sleep 0.1)
       (mover-cuadrado (- n 10))])]))

(define (comenzar-juego posx posy)
  (set! circle-posn-x posx)
  (set! circle-posn-y posy)
  (elipse posx posy)
  (thread (lambda () (cambiar-posn posx posy)))
  (mover-cuadrado 500))

(comenzar-juego 250 250)
